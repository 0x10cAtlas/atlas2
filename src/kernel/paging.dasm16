; #############################################################################
; # Atlas 2 Kernel - Paging                                                   #
; # Created: 28.01.2013                                                       #
; # Changelog:                                                                #
; # 28.01.2013, plusmid - created file, implemented basic paging              #
; #############################################################################

; page_get_memory - calculates the amount of free memory
; A <- the amount of memory in free pages
; ToDo: TEST!
:page_get_memory
	SET PUSH, X
	SET X, page_table
	SET A, 0

:page_get_memory_loop
	IFE [X], 0
		ADD A, 1024

	ADD X, 2

	IFN X, page_table_end
		SET PC, page_get_memory_loop

	SET X, POP
	SET PC, POP


; page_free_all - frees all pages of a specific process
; A -> process id
; ToDo: TEST!
:page_free_all
	SET PUSH, X
	SET X, page_table

:page_free_all_loop
	IFE [X], A
		SET [X], 0

	ADD X, 2

	IFN X, page_table_end
		SET PC, page_free_all_loop

	SET X, POP
	SET PC, POP


; page_free - frees a page by its number
; A -> page number
; ToDo: TEST!
:page_free
	SET PUSH, A

	SHL A, 1
	ADD A, page_table

	SET [A], 0

	SET A, POP
	SET PC, POP


; page_allocate - allocates B pages starting from A for process C
; A -> first page
; B -> number of pages
; C -> process id
; ToDo: TEST!
:page_allocate
	SET PUSH, A
	SET PUSH, B

	SHL A, 1
	ADD A, page_table

:page_allocate_loop
	SET [A], C
	ADD A, 2
	SUB B, 1
	IFN B, 0
		SET PC, page_allocate_loop

	SET B, POP
	SET A, POP
	SET PC, POP


; page_get_free - returns the number of the first free page
; A -> number of pages to reserve
; A <- number of the first page or 0xFFFF if there are no more free pages
:page_get_free
	SET PUSH, X
	SET PUSH, Y
	SET PUSH, Z

	SET X, A
	SET Y, page_table
	SET Z, 0xFFFF

:loop
	IFE Y, page_table_end
		SET PC, end

	IFN [Y], 0
		SET PC, else

	IFE Z, 0xFFFF
		SET Z, Y;

	SUB X, 1;

	IFE X, 0
		SET PC, end

	SET PC, skip

:else
	IFE Z, 0xFFFF
		SET PC, skip

	SET Z, 0xFFFF;
	SET X, A;

:skip
	ADD Y, 2;
	SET PC, loop

:end
	SET A, Z

	; calculate the page number
	SUB A, page_table
	SHR A, 1

	SET Z, POP
	SET Y, POP
	SET X, POP
	SET PC, POP


:page_table
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0

	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
	DAT 0, 0, 0, 0, 0, 0, 0, 0
:page_table_end

