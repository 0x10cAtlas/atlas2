; #############################################################################
; # Atlas 2 Kernel - memory routines                                          #
; # Created: bungao - 29.01.2013                                              #
; # Changelog:                                                                #
; # 29.01.2013, bungao - file created, basic routines                         #
; # 29.01.2013, plusmid - changed some of the comments                        #
; # 31.01.2013, bungao  - added mm_alloc                                      #
; # 31.01.2013, plusmid - added comments, make mm_alloc (slightly) faster     #
; #############################################################################


; mem_clear - sets the memory to 0x0000 (wrapper for mem_set with C = 0)
; A -> From Addr
; B -> Length
:mem_clear
	SET PUSH, C ; save C
	SET C, 0
	JSR mem_set ; call mem_set with C = 0
	SET C, POP  ; clean up
	SET PC, POP


; mem_copy
; Copies data from one location to another
; Takes 4 cycles per loop for a copy speed of 25,000 words per second
; A -> source
; B -> dest
; C -> length
:mem_copy
	SET PUSH, A ; save registers
	SET PUSH, B
	SET PUSH, C
	SET PUSH, I
	SET PUSH, J

	ADD C, A    ; calculate last address

	SET I, B    ; some prep work so we can use STI
	SET J, A

:mem_copy_loop
	STI [I], [J] ; use STI to do our work
	IFN J, C    ; are we done?
		SET PC, mem_copy_loop ; no, repeat!

	SET J, POP ; yes, clean up
	SET I, POP
	SET C, POP
	SET B, POP
	SET A, POP
	SET PC, POP

	
; mem_set - sets an area of memory to a value
; A -> start
; B -> length
; C -> value
:mem_set
	SET PUSH, A ; save our registers
	SET PUSH, B
	ADD B, A    ; calculate the last address

:mem_clear_loop
	SET [A], C  ; set word to value
	ADD A, 1    ; point to next memory address
	IFN A, B    ; are we done?
	   SET PC, mem_clear_loop ; no, repeat!

	SET B, POP  ; yes, clean up
	SET A, POP
	SET PC, POP


; mm_setup - sets up memory management
; A -> start address of the memory to manage
; B -> number of words to manage (even number!)
:mm_setup
	SET PUSH, A
	SET PUSH, B

	AND B, 0xFFFE   ; set to even
	SUB B, 4		; sub overhead
	SET [A], 0x0000 ; set first word to zero
	ADD A, 1		; shift pointer
	SET [A], B		; set second word to allocation size
	ADD A, B		; shift to 3rd last word
	ADD A, 1		; shift to second last word
	SET [A], B		; set to allocation size
	ADD A, 1		; shift to last word
	SET [A], 0x0000	; set to 0

	SET B, POP		; restore
	SET A, POP
	SET PC, POP

; mm_count - counts the amount of free memory in this memory table
; A -> start of the memory table
; A <- amount of free memory in this table
:mm_count
	IFN [A], 0
		SET PC, mm_count_err

	SET PUSH, X ; saving our registers
	SET PUSH, Y
	SET PUSH, Z

	SET Y, 0    ; our counter
	ADD A, 1    ; set the pointer to the first entry

:mm_count_loop
	SET X, [A]  ; get the length of the entry
	SET Z, X

	AND X, 0x0001 ; check for the lowest bit
	IFN X, 0
		SET PC, mm_count_skip

	ADD Y, [A]  ; the entry is free: add its length to Y
	ADD A, 1    ; we add the raw entry on A so we need this

:mm_count_skip
	ADD A, Z    ; add the length of the entry (including the flag)
	ADD A, 1    ; skip the second length
	IFN [A], 0  ; are we done?
		SET PC, mm_count_loop ; no, repeat

	SET A, Y    ; yes, save the free memory in A

	SET Z, POP  ; and clean up
	SET Y, POP
	SET X, POP
	SET PC, POP

:mm_count_err
	SET A, 0 ; something went wrong, return 0
	SET PC, POP

	
; mm_alloc - allocates a length of memory and returns address
; A -> pointer to manage memory area.
; B -> length to allocate, rounded up if odd
; A <- address of allocation, if no free memory is found 0 is returned.
; malloc
:mm_alloc
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
    SET PUSH, I
	SET PUSH, J
	SET PUSH, B

	ADD PEEK, 1 ; round up
	AND PEEK, 0xFFFE

	ADD A, 1
	SET J, PEEK
	ADD J, 2

:mm_alloc_loop
	SET B, [A]
	IFE B, 0
		SET PC, mm_alloc_error
	
	SET C, B
	AND C, 0x0001
	IFE C, 1
		SET PC, mm_alloc_skip
		
	SET C, A
	ADD C, [A]
	ADD C, 1	

	IFE B, PEEK
		SET PC, mm_alloc_table_end
		
	IFG J, B
		SET PC, mm_alloc_skip

	
	SET [A], PEEK ; first bookend to length
	SET I, A
	ADD I, PEEK
        ADD I, 1
	SET [I], PEEK
	ADD [I], 1
	ADD [A], 1
	ADD I, 1
	SET B, [C]
	SUB B, PEEK
	SUB B, 2
	SET [C], B
	SET [I], B

:mm_alloc_end
	ADD SP, 1
	SET J, POP
    SET I, POP
	SET C, POP
	SET B, POP
	ADD SP, 1
        ADD A, 1
	SET PC, POP

:mm_alloc_skip
        AND B, 0xFFFE
	ADD A, B
	ADD A, 2
	SET PC, mm_alloc_loop

:mm_alloc_error
        SET A, 0xffff
        SET PC, mm_alloc_end

:mm_alloc_table_end
	ADD [A], 1
	ADD [C], 1
	SET PC, mm_alloc_end


; mm_free - deallocates an allocation of memory when provided by its address
; A -> pointer to the memory allocation (same value that mm_alloc returns)
:mm_free
	SET PUSH, A
	SET PUSH, B
	SET PUSH, C
	
	SET C, A
	SUB A, 1
	
	AND [A], 0xFFFE
	ADD C, [A]
	AND [C], 0xFFFE
	
	ADD C, 1
	IFE [C], 0
		SET PC, mm_free_skip
		
	SET B, [C]
	AND B, 0x0001
	IFE B, 1
		SET PC, mm_free_skip
	
	; join with next entry
	ADD [A], 2
	ADD [A], [C]
	
	SET C, A
	ADD C, [A]
	ADD C, 1
	SET [C], [A]

:mm_free_skip
	SET C, A
	SUB C, 1
	
	IFE [C], 0
		SET PC, mm_free_end
	
	SET B, [C]
	AND B, 0x0001
	IFE B, 1
		SET PC, mm_free_end
		
	; join with prev entry
	SUB C, [C]
	ADD [C], 2
	ADD [C], [A]
	
	SET A, C
	ADD A, [C]
	SUB A, 1
	SET [A], [C]
	
:mm_free_end
	SET C, POP
	SET B, POP
	SET A, POP
	SET PC, POP
